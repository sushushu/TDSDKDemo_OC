#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef IANALYTICSSDK_SWIFT_H
#define IANALYTICSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IAnalyticsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSDate;
@class NSURL;
/// AnalyticsSDK 主类
/// 用于初始化和管理 SDK 的核心功能
/// @since 1.0.0
SWIFT_CLASS("_TtC13IAnalyticsSDK12AnalyticsSDK")
@interface AnalyticsSDK : NSObject
/// SDK 版本号
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// 单例实例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AnalyticsSDK * _Nonnull shared;)
+ (AnalyticsSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 私有初始化方法
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 初始化 SDK
/// @param apiKey API密钥，必填，用于服务端验证
/// @param clientId 客户端ID，必填，客户端唯一标识
/// @param aesSecret AES密钥，必填，用于数据加密
/// @param apiUrl API地址，必填
/// @param debugMode 是否开启调试模式，可选，默认为false
/// @param environment 环境配置字符串（如 “PRODUCTION”、“DEVELOPMENT”），可选，默认为”PRODUCTION”
/// @param enableAdaptiveThrottling 是否启用自适应批量调整，可选，默认为true
/// @param initialUploadThreshold 初始上传阈值，可选，默认为20
/// @param initialUploadInterval 初始上传间隔(毫秒)，可选，默认为60000
- (void)initializeWithApiKey:(NSString * _Nonnull)apiKey clientId:(NSString * _Nonnull)clientId aesSecret:(NSString * _Nonnull)aesSecret apiUrl:(NSString * _Nonnull)apiUrl debugMode:(BOOL)debugMode environment:(NSString * _Nonnull)environment enableAdaptiveThrottling:(BOOL)enableAdaptiveThrottling initialUploadThreshold:(NSInteger)initialUploadThreshold initialUploadInterval:(int64_t)initialUploadInterval;
/// SDK首次初始化事件埋点（仅第一次启动时调用）
- (void)trackFirstLaunchEvent;
/// 获取首次安装时间
/// @return Date? 首次安装时间
- (NSDate * _Nullable)getFirstInstallTime SWIFT_WARN_UNUSED_RESULT;
/// 重置首次安装状态（用于测试）
- (void)resetFirstInstallStatus;
/// 获取剪贴板权限状态
/// @return Bool 是否已授权
- (BOOL)getClipboardPermissionStatus SWIFT_WARN_UNUSED_RESULT;
/// 获取剪贴板参数
/// @return [String: Any] 剪贴板参数字典
- (NSDictionary<NSString *, id> * _Nonnull)getClipboardParams SWIFT_WARN_UNUSED_RESULT;
/// 清除剪贴板参数
- (void)clearClipboardParams;
/// 获取设备信息
/// @return Dictionary<String, Any> 包含设备信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getDeviceInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取应用信息
/// @return Dictionary<String, Any> 包含应用信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getAppInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取网络状态
/// @return String 网络状态描述
- (NSString * _Nonnull)getNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// 获取 CPU 信息
/// @return Dictionary<String, Any> 包含 CPU 信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getCPUInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取内存信息
/// @return Dictionary<String, Any> 包含内存信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getMemoryInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕信息
/// @return Dictionary<String, Any> 包含屏幕信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getScreenInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取时区信息
/// @return Dictionary<String, Any> 包含时区信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getTimezoneInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取语言信息
/// @return Dictionary<String, Any> 包含语言信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getLanguageInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取设备 UA 信息
/// @param completion 完成回调，返回 UA 字符串
- (void)getUserAgentWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// 设置用户ID
/// @param userId 用户唯一标识
- (void)setUserId:(NSString * _Nonnull)userId;
/// 获取当前用户ID
/// @return String? 用户ID，如果未设置则返回nil
- (NSString * _Nullable)getUserId SWIFT_WARN_UNUSED_RESULT;
/// 清除用户ID
- (void)clearUserId;
/// 设置用户属性
/// @param key 属性键
/// @param value 属性值
- (void)setUserProperty:(NSString * _Nonnull)key value:(id _Nonnull)value;
/// 批量设置用户属性
/// @param properties 属性字典
- (void)setUserProperties:(NSDictionary<NSString *, id> * _Nonnull)properties;
/// 清除所有用户属性，注销，切换换账号必须要调用该接口
- (void)clearAllUserProperties;
/// 获取所有用户属性
/// @return [String: Any] 用户属性字典
- (NSDictionary<NSString *, id> * _Nonnull)getAllUserProperties SWIFT_WARN_UNUSED_RESULT;
/// 清除指定用户属性
/// @param key 属性键
- (void)clearUserProperty:(NSString * _Nonnull)key;
/// 跟踪事件（eventContent 内不再包含 deviceInfo、otherInfo、screenInfo、osInfo）
/// @param eventName 事件名称
/// @param params 事件参数
- (void)trackEvent:(NSString * _Nonnull)eventName params:(NSDictionary<NSString *, id> * _Nullable)params;
/// 跟踪页面访问
/// @param pageName 页面名称
/// @param params 页面参数
- (void)trackPage:(NSString * _Nonnull)pageName params:(NSDictionary<NSString *, id> * _Nullable)params;
/// 获取事件队列
/// @return [[String: Any]] 事件队列
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)getEventQueue SWIFT_WARN_UNUSED_RESULT;
/// 清空事件队列
- (void)clearEventQueue;
/// 获取事件队列大小
/// @return Int 事件队列大小
- (NSInteger)getEventQueueSize SWIFT_WARN_UNUSED_RESULT;
/// 设置API URL
/// @param url API地址
- (void)setApiUrl:(NSString * _Nonnull)url;
/// 获取当前API URL
/// @return String API地址
- (NSString * _Nonnull)getApiUrl SWIFT_WARN_UNUSED_RESULT;
/// 设置事件上传阈值
/// @param threshold 阈值数量
- (void)setEventUploadThreshold:(NSInteger)threshold;
/// 设置上传间隔
/// @param interval 间隔时间（毫秒）
- (void)setUploadInterval:(NSTimeInterval)interval;
/// 设置数据保留天数
/// @param days 保留天数
- (void)setDataRetentionDays:(NSInteger)days;
/// 设置最大记录数
/// @param maxRecords 最大记录数
- (void)setMaxRecords:(NSInteger)maxRecords;
/// 设置最大数据库大小
/// @param maxSize 最大大小（MB）
- (void)setMaxDatabaseSize:(NSInteger)maxSize;
/// 获取数据库大小
/// @return Int 数据库大小（字节）
- (NSInteger)getDatabaseSize SWIFT_WARN_UNUSED_RESULT;
/// 清理本地数据
/// @return Int 清理的记录数
- (NSInteger)cleanupLocalData SWIFT_WARN_UNUSED_RESULT;
/// 手动触发事件上传
- (void)uploadEvents;
/// 禁止拷贝，始终返回单例自身
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
/// 禁止mutableCopy，始终返回单例自身
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
/// 注册深度链接回调（OC 兼容）
/// @param handler Objective-C block，参数为 NSURL 和 NSDictionary
- (void)registerDeepLinkHandlerObjC:(void (^ _Nonnull)(NSURL * _Nonnull, NSDictionary * _Nonnull))handler;
/// 处理应用被深度链接唤起
/// @param url 被打开的URL
/// @param options 启动参数
- (void)handleOpenURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options;
/// 解析 URL 查询参数
/// @param url 需要解析的 URL
/// @return [String: String] 参数字典
+ (NSDictionary<NSString *, NSString *> * _Nonnull)parseURLParams:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// 埋点用户注册事件
/// @param utmParams UTM参数（可选）
- (void)trackRegisterEventWithUtmParams:(NSDictionary<NSString *, id> * _Nullable)utmParams;
/// 埋点用户充值事件
/// @param amount 充值金额
/// @param utmParams UTM参数（可选）
- (void)trackRechargeEventWithAmount:(double)amount utmParams:(NSDictionary<NSString *, id> * _Nullable)utmParams;
/// 设置 User-Agent
/// @param ua 用户自定义 UA 字符串
- (void)setUserAgent:(NSString * _Nonnull)ua;
/// 设置 UTM 参数
/// @param utm 用户自定义 UTM 字典
- (void)setUtmParams:(NSDictionary<NSString *, id> * _Nonnull)utm;
/// 设置设备属性
/// @param key 属性键
/// @param value 属性值
- (void)setDeviceProperty:(NSString * _Nonnull)key value:(id _Nonnull)value;
/// 清除指定设备属性
/// @param key 属性键
- (void)clearDeviceProperty:(NSString * _Nonnull)key;
/// 获取所有设备属性
- (NSDictionary<NSString *, id> * _Nonnull)getAllDeviceProperties SWIFT_WARN_UNUSED_RESULT;
/// 获取当前 UA
- (NSString * _Nonnull)getUserAgentString SWIFT_WARN_UNUSED_RESULT;
/// 获取当前 UTM 参数
- (NSDictionary<NSString *, id> * _Nonnull)getUtmParams SWIFT_WARN_UNUSED_RESULT;
/// OC友好方法：上报自定义事件
- (void)trackEventWithEventName:(NSString * _Nonnull)eventName params:(NSDictionary<NSString *, id> * _Nullable)params;
/// OC友好方法：上报页面访问
- (void)trackPageWithPageName:(NSString * _Nonnull)pageName params:(NSDictionary<NSString *, id> * _Nullable)params;
@end

@interface AnalyticsSDK (SWIFT_EXTENSION(IAnalyticsSDK))
/// OC/Swift通用：通过字符串设置环境
/// @param envString 环境字符串（如 “DEVELOPMENT”、“PRODUCTION”）
- (void)setEnvironmentWithString:(NSString * _Nonnull)envString;
/// OC/Swift通用：获取当前环境字符串
/// @return 当前环境字符串
- (NSString * _Nonnull)getEnvironmentString SWIFT_WARN_UNUSED_RESULT;
@end

@interface AnalyticsSDK (SWIFT_EXTENSION(IAnalyticsSDK))
/// OC/Swift通用：设置API版本
- (void)setApiVersion:(NSString * _Nonnull)version;
/// OC/Swift通用：获取当前API Base URL
- (NSString * _Nonnull)getApiBaseUrl SWIFT_WARN_UNUSED_RESULT;
@end

/// CPU Class
SWIFT_CLASS("_TtC13IAnalyticsSDK3CPU")
@interface CPU : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK3FPS")
@interface FPS : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_PROTOCOL("_TtP13IAnalyticsSDK11FPSDelegate_")
@protocol FPSDelegate
@optional
- (void)fpsWithFps:(FPS * _Nonnull)fps currentFPS:(double)currentFPS;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK8Hardware")
@interface Hardware : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK6Memory")
@interface Memory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NetworkFlow;
SWIFT_PROTOCOL("_TtP13IAnalyticsSDK11NetDelegate_")
@protocol NetDelegate
@optional
- (void)networkFlowWithNetworkFlow:(NetworkFlow * _Nonnull)networkFlow catchWithWifiSend:(uint32_t)wifiSend wifiReceived:(uint32_t)wifiReceived wwanSend:(uint32_t)wwanSend wwanReceived:(uint32_t)wwanReceived;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK11NetworkFlow")
@interface NetworkFlow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK6System")
@interface System : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 钥匙串UDID管理器
/// 用于在钥匙串中安全地存储和获取设备UDID
/// 数据存储在应用私有钥匙串空间中，仅当前应用可访问
/// @since 1.0.0
SWIFT_CLASS("_TtC13IAnalyticsSDK21TDKeychainUDIDManager")
@interface TDKeychainUDIDManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TDKeychainUDIDManager * _Nonnull shared;)
+ (TDKeychainUDIDManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 获取UDID存储信息
/// @return Dictionary<String, Any> 包含UDID存储信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getUDIDStorageInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取设备UDID
/// @return String UDID字符串
/// @throws KeychainError 如果获取失败
- (NSString * _Nullable)getUDIDAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 重置UDID
/// @throws KeychainError 如果重置失败
- (BOOL)resetUDIDAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, KeychainError, open) {
/// 重复条目
  KeychainErrorDuplicateEntry = 0,
/// 未知错误
  KeychainErrorUnknown = 1,
/// 无数据
  KeychainErrorNoData = 2,
/// 数据格式错误
  KeychainErrorUnexpectedData = 3,
/// 权限错误
  KeychainErrorPermissionDenied = 4,
};
static NSString * _Nonnull const KeychainErrorDomain = @"IAnalyticsSDK.TDKeychainUDIDManager.KeychainError";

SWIFT_CLASS("_TtC13IAnalyticsSDK9TDNetwork")
@interface TDNetwork : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Tecdo设备信息管理类
/// 用于获取iOS设备的各种信息，如UA、网络状态、系统内存等
/// @since 1.0.0
SWIFT_CLASS("_TtC13IAnalyticsSDK15TecdoDeviceInfo")
@interface TecdoDeviceInfo : NSObject
/// 单例实例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TecdoDeviceInfo * _Nonnull shared;)
+ (TecdoDeviceInfo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 私有初始化方法
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 检查是否已获得跟踪权限
/// @return Bool 是否已获得权限
- (BOOL)isTrackingAuthorized SWIFT_WARN_UNUSED_RESULT;
/// 获取设备UDID
/// @return String UDID字符串
- (NSString * _Nonnull)getUDID SWIFT_WARN_UNUSED_RESULT;
/// 获取设备UA信息
/// @param completion 完成回调，返回UA字符串
- (void)getUserAgentWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// 清除UA缓存
- (void)clearUserAgentCache;
/// 获取设备网络状态
/// @return String 网络状态描述
- (NSString * _Nonnull)getNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// 获取设备语言信息
/// @return Dictionary<String, Any> 包含语言信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getLanguageInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取CPU使用率信息
/// @return Dictionary<String, Any> 包含CPU使用率信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getCPUInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取时区信息
/// @return Dictionary<String, Any> 包含时区信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getTimezoneInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取IDFV
- (NSString * _Nonnull)getIDFV SWIFT_WARN_UNUSED_RESULT;
/// 获取IDFA（不会主动弹窗）
- (NSString * _Nonnull)getIDFA SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef IANALYTICSSDK_SWIFT_H
#define IANALYTICSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IAnalyticsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
@class NSDate;
@class NSURL;
/// AnalyticsSDK 主类
/// 用于初始化和管理 SDK 的核心功能
/// @since 1.0.0
SWIFT_CLASS("_TtC13IAnalyticsSDK12AnalyticsSDK")
@interface AnalyticsSDK : NSObject
/// SDK 版本号
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// 单例实例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AnalyticsSDK * _Nonnull shared;)
+ (AnalyticsSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 私有初始化方法
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 初始化 SDK
/// @param apiKey API密钥，必填，用于服务端验证
/// @param clientId 客户端ID，必填，客户端唯一标识
/// @param aesSecret AES密钥，必填，用于数据加密
/// @param apiUrl API地址，必填
/// @param debugMode 是否开启调试模式，可选，默认为false
/// @param environment 环境配置字符串（如 “PRODUCTION”、“DEVELOPMENT”），可选，默认为”PRODUCTION”
/// @param enableAdaptiveThrottling 是否启用自适应批量调整，可选，默认为true
/// @param initialUploadThreshold 初始上传阈值，可选，默认为20
/// @param initialUploadInterval 初始上传间隔(毫秒)，可选，默认为60000
- (void)initializeWithApiKey:(NSString * _Nonnull)apiKey clientId:(NSString * _Nonnull)clientId aesSecret:(NSString * _Nonnull)aesSecret apiUrl:(NSString * _Nonnull)apiUrl debugMode:(BOOL)debugMode environment:(NSString * _Nonnull)environment enableAdaptiveThrottling:(BOOL)enableAdaptiveThrottling initialUploadThreshold:(NSInteger)initialUploadThreshold initialUploadInterval:(int64_t)initialUploadInterval;
/// SDK首次初始化事件埋点（仅第一次启动时调用）
- (void)trackFirstLaunchEvent;
/// 获取首次安装时间
/// @return Date? 首次安装时间
- (NSDate * _Nullable)getFirstInstallTime SWIFT_WARN_UNUSED_RESULT;
/// 重置首次安装状态（用于测试）
- (void)resetFirstInstallStatus;
/// 获取剪贴板权限状态
/// @return Bool 是否已授权
- (BOOL)getClipboardPermissionStatus SWIFT_WARN_UNUSED_RESULT;
/// 获取剪贴板参数
/// @return [String: Any] 剪贴板参数字典
- (NSDictionary<NSString *, id> * _Nonnull)getClipboardParams SWIFT_WARN_UNUSED_RESULT;
/// 清除剪贴板参数
- (void)clearClipboardParams;
/// 获取设备信息
/// @return Dictionary<String, Any> 包含设备信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getDeviceInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取应用信息
/// @return Dictionary<String, Any> 包含应用信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getAppInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取网络状态
/// @return String 网络状态描述
- (NSString * _Nonnull)getNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// 获取 CPU 信息
/// @return Dictionary<String, Any> 包含 CPU 信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getCPUInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取内存信息
/// @return Dictionary<String, Any> 包含内存信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getMemoryInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取屏幕信息
/// @return Dictionary<String, Any> 包含屏幕信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getScreenInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取时区信息
/// @return Dictionary<String, Any> 包含时区信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getTimezoneInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取语言信息
/// @return Dictionary<String, Any> 包含语言信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getLanguageInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取设备 UA 信息
/// @param completion 完成回调，返回 UA 字符串
- (void)getUserAgentWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// 设置用户ID
/// @param userId 用户唯一标识
- (void)setUserId:(NSString * _Nonnull)userId;
/// 获取当前用户ID
/// @return String? 用户ID，如果未设置则返回nil
- (NSString * _Nullable)getUserId SWIFT_WARN_UNUSED_RESULT;
/// 清除用户ID
- (void)clearUserId;
/// 设置用户属性
/// @param key 属性键
/// @param value 属性值
- (void)setUserProperty:(NSString * _Nonnull)key value:(id _Nonnull)value;
/// 批量设置用户属性
/// @param properties 属性字典
- (void)setUserProperties:(NSDictionary<NSString *, id> * _Nonnull)properties;
/// 清除所有用户属性，注销，切换换账号必须要调用该接口
- (void)clearAllUserProperties;
/// 获取所有用户属性
/// @return [String: Any] 用户属性字典
- (NSDictionary<NSString *, id> * _Nonnull)getAllUserProperties SWIFT_WARN_UNUSED_RESULT;
/// 清除指定用户属性
/// @param key 属性键
- (void)clearUserProperty:(NSString * _Nonnull)key;
/// 跟踪事件（eventContent 内不再包含 deviceInfo、otherInfo、screenInfo、osInfo）
/// @param eventName 事件名称
/// @param params 事件参数
- (void)trackEvent:(NSString * _Nonnull)eventName params:(NSDictionary<NSString *, id> * _Nullable)params;
/// 跟踪页面访问
/// @param pageName 页面名称
/// @param params 页面参数
- (void)trackPage:(NSString * _Nonnull)pageName params:(NSDictionary<NSString *, id> * _Nullable)params;
/// 获取事件队列
/// @return [[String: Any]] 事件队列
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)getEventQueue SWIFT_WARN_UNUSED_RESULT;
/// 清空事件队列
- (void)clearEventQueue;
/// 获取事件队列大小
/// @return Int 事件队列大小
- (NSInteger)getEventQueueSize SWIFT_WARN_UNUSED_RESULT;
/// 设置API URL
/// @param url API地址
- (void)setApiUrl:(NSString * _Nonnull)url;
/// 获取当前API URL
/// @return String API地址
- (NSString * _Nonnull)getApiUrl SWIFT_WARN_UNUSED_RESULT;
/// 设置事件上传阈值
/// @param threshold 阈值数量
- (void)setEventUploadThreshold:(NSInteger)threshold;
/// 设置上传间隔
/// @param interval 间隔时间（毫秒）
- (void)setUploadInterval:(NSTimeInterval)interval;
/// 设置数据保留天数
/// @param days 保留天数
- (void)setDataRetentionDays:(NSInteger)days;
/// 设置最大记录数
/// @param maxRecords 最大记录数
- (void)setMaxRecords:(NSInteger)maxRecords;
/// 设置最大数据库大小
/// @param maxSize 最大大小（MB）
- (void)setMaxDatabaseSize:(NSInteger)maxSize;
/// 获取数据库大小
/// @return Int 数据库大小（字节）
- (NSInteger)getDatabaseSize SWIFT_WARN_UNUSED_RESULT;
/// 清理本地数据
/// @return Int 清理的记录数
- (NSInteger)cleanupLocalData SWIFT_WARN_UNUSED_RESULT;
/// 手动触发事件上传
- (void)uploadEvents;
/// 禁止拷贝，始终返回单例自身
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
/// 禁止mutableCopy，始终返回单例自身
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
/// 注册深度链接回调（OC 兼容）
/// @param handler Objective-C block，参数为 NSURL 和 NSDictionary
- (void)registerDeepLinkHandlerObjC:(void (^ _Nonnull)(NSURL * _Nonnull, NSDictionary * _Nonnull))handler;
/// 处理应用被深度链接唤起
/// @param url 被打开的URL
/// @param options 启动参数
- (void)handleOpenURL:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options;
/// 解析 URL 查询参数
/// @param url 需要解析的 URL
/// @return [String: String] 参数字典
+ (NSDictionary<NSString *, NSString *> * _Nonnull)parseURLParams:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// 埋点用户注册事件
/// @param utmParams UTM参数（可选）
- (void)trackRegisterEventWithUtmParams:(NSDictionary<NSString *, id> * _Nullable)utmParams;
/// 埋点用户充值事件
/// @param amount 充值金额
/// @param utmParams UTM参数（可选）
- (void)trackRechargeEventWithAmount:(double)amount utmParams:(NSDictionary<NSString *, id> * _Nullable)utmParams;
/// 设置 User-Agent
/// @param ua 用户自定义 UA 字符串
- (void)setUserAgent:(NSString * _Nonnull)ua;
/// 设置 UTM 参数
/// @param utm 用户自定义 UTM 字典
- (void)setUtmParams:(NSDictionary<NSString *, id> * _Nonnull)utm;
/// 设置设备属性
/// @param key 属性键
/// @param value 属性值
- (void)setDeviceProperty:(NSString * _Nonnull)key value:(id _Nonnull)value;
/// 清除指定设备属性
/// @param key 属性键
- (void)clearDeviceProperty:(NSString * _Nonnull)key;
/// 获取所有设备属性
- (NSDictionary<NSString *, id> * _Nonnull)getAllDeviceProperties SWIFT_WARN_UNUSED_RESULT;
/// 获取当前 UA
- (NSString * _Nonnull)getUserAgentString SWIFT_WARN_UNUSED_RESULT;
/// 获取当前 UTM 参数
- (NSDictionary<NSString *, id> * _Nonnull)getUtmParams SWIFT_WARN_UNUSED_RESULT;
/// OC友好方法：上报自定义事件
- (void)trackEventWithEventName:(NSString * _Nonnull)eventName params:(NSDictionary<NSString *, id> * _Nullable)params;
/// OC友好方法：上报页面访问
- (void)trackPageWithPageName:(NSString * _Nonnull)pageName params:(NSDictionary<NSString *, id> * _Nullable)params;
@end

@interface AnalyticsSDK (SWIFT_EXTENSION(IAnalyticsSDK))
/// OC/Swift通用：通过字符串设置环境
/// @param envString 环境字符串（如 “DEVELOPMENT”、“PRODUCTION”）
- (void)setEnvironmentWithString:(NSString * _Nonnull)envString;
/// OC/Swift通用：获取当前环境字符串
/// @return 当前环境字符串
- (NSString * _Nonnull)getEnvironmentString SWIFT_WARN_UNUSED_RESULT;
@end

@interface AnalyticsSDK (SWIFT_EXTENSION(IAnalyticsSDK))
/// OC/Swift通用：设置API版本
- (void)setApiVersion:(NSString * _Nonnull)version;
/// OC/Swift通用：获取当前API Base URL
- (NSString * _Nonnull)getApiBaseUrl SWIFT_WARN_UNUSED_RESULT;
@end

/// CPU Class
SWIFT_CLASS("_TtC13IAnalyticsSDK3CPU")
@interface CPU : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK3FPS")
@interface FPS : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_PROTOCOL("_TtP13IAnalyticsSDK11FPSDelegate_")
@protocol FPSDelegate
@optional
- (void)fpsWithFps:(FPS * _Nonnull)fps currentFPS:(double)currentFPS;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK8Hardware")
@interface Hardware : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK6Memory")
@interface Memory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NetworkFlow;
SWIFT_PROTOCOL("_TtP13IAnalyticsSDK11NetDelegate_")
@protocol NetDelegate
@optional
- (void)networkFlowWithNetworkFlow:(NetworkFlow * _Nonnull)networkFlow catchWithWifiSend:(uint32_t)wifiSend wifiReceived:(uint32_t)wifiReceived wwanSend:(uint32_t)wwanSend wwanReceived:(uint32_t)wwanReceived;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK11NetworkFlow")
@interface NetworkFlow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC13IAnalyticsSDK6System")
@interface System : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 钥匙串UDID管理器
/// 用于在钥匙串中安全地存储和获取设备UDID
/// 数据存储在应用私有钥匙串空间中，仅当前应用可访问
/// @since 1.0.0
SWIFT_CLASS("_TtC13IAnalyticsSDK21TDKeychainUDIDManager")
@interface TDKeychainUDIDManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TDKeychainUDIDManager * _Nonnull shared;)
+ (TDKeychainUDIDManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 获取UDID存储信息
/// @return Dictionary<String, Any> 包含UDID存储信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getUDIDStorageInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取设备UDID
/// @return String UDID字符串
/// @throws KeychainError 如果获取失败
- (NSString * _Nullable)getUDIDAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// 重置UDID
/// @throws KeychainError 如果重置失败
- (BOOL)resetUDIDAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, KeychainError, open) {
/// 重复条目
  KeychainErrorDuplicateEntry = 0,
/// 未知错误
  KeychainErrorUnknown = 1,
/// 无数据
  KeychainErrorNoData = 2,
/// 数据格式错误
  KeychainErrorUnexpectedData = 3,
/// 权限错误
  KeychainErrorPermissionDenied = 4,
};
static NSString * _Nonnull const KeychainErrorDomain = @"IAnalyticsSDK.TDKeychainUDIDManager.KeychainError";

SWIFT_CLASS("_TtC13IAnalyticsSDK9TDNetwork")
@interface TDNetwork : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Tecdo设备信息管理类
/// 用于获取iOS设备的各种信息，如UA、网络状态、系统内存等
/// @since 1.0.0
SWIFT_CLASS("_TtC13IAnalyticsSDK15TecdoDeviceInfo")
@interface TecdoDeviceInfo : NSObject
/// 单例实例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TecdoDeviceInfo * _Nonnull shared;)
+ (TecdoDeviceInfo * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 私有初始化方法
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 检查是否已获得跟踪权限
/// @return Bool 是否已获得权限
- (BOOL)isTrackingAuthorized SWIFT_WARN_UNUSED_RESULT;
/// 获取设备UDID
/// @return String UDID字符串
- (NSString * _Nonnull)getUDID SWIFT_WARN_UNUSED_RESULT;
/// 获取设备UA信息
/// @param completion 完成回调，返回UA字符串
- (void)getUserAgentWithCompletion:(void (^ _Nonnull)(NSString * _Nonnull))completion;
/// 清除UA缓存
- (void)clearUserAgentCache;
/// 获取设备网络状态
/// @return String 网络状态描述
- (NSString * _Nonnull)getNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// 获取设备语言信息
/// @return Dictionary<String, Any> 包含语言信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getLanguageInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取CPU使用率信息
/// @return Dictionary<String, Any> 包含CPU使用率信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getCPUInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取时区信息
/// @return Dictionary<String, Any> 包含时区信息的字典
- (NSDictionary<NSString *, id> * _Nonnull)getTimezoneInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取IDFV
- (NSString * _Nonnull)getIDFV SWIFT_WARN_UNUSED_RESULT;
/// 获取IDFA（不会主动弹窗）
- (NSString * _Nonnull)getIDFA SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
